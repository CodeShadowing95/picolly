import jwt, { decode } from 'jsonwebtoken';

const auth = async (req, res, next) => {
  try {
    /* `const token = req.headers.authorization.split(" ")[1];` is splitting the `Authorization` header
    value into an array of two strings, separated by a space. It then assigns the second string
    (index 1) to the `token` variable. This assumes that the `Authorization` header is in the format
    of "Bearer [token]", where the token is the second string. */
    const token = req.headers.authorization.split(" ")[1];
    /* `const isCustomAuth = token.length < 500;` is checking if the length of the `token` string is
    less than 500 characters. If it is, then it assumes that the token is a custom authentication
    token generated by the server. If it is not, then it assumes that the token is a Google
    authentication token. This is used to differentiate between the two types of authentication and
    handle them accordingly. */
    const isCustomAuth = token.length < 500;

    let decodedData;

    if(token && isCustomAuth) {
      /* `decodedData = jwt.verify(token, 'test');` is verifying the authenticity of the `token` using
      the secret key `'test'` and decoding the payload of the token. If the token is valid, it will
      return the decoded payload data, which is then assigned to the `decodedData` variable. If the
      token is invalid or has expired, it will throw an error. */
      decodedData = jwt.verify(token, 'test');

      /* `req.userId = decodedData?.id;` is assigning the `id` property of the `decodedData` object to
      the `userId` property of the `req` (request) object. The `?.` is the optional chaining
      operator, which checks if `decodedData` is not null or undefined before accessing its `id`
      property. This line of code is used to extract the user ID from the decoded token and attach
      it to the request object for further use in the application. */
      req.userId = decodedData?.id;
    } else {
      // When login with Google account
      /* `decodedData = jwt.decode(token);` is decoding the payload of a Google authentication token
      using the `jwt` library. It does not verify the authenticity of the token or check if it has
      expired, unlike `jwt.verify()`. The decoded payload data is then assigned to the `decodedData`
      variable. The `sub` property of the decoded payload is used to extract the user ID and attach
      it to the request object for further use in the application. */
      decodedData = jwt.decode(token);

      req.userId = decodedData?.sub;
    }
  } catch (error) {
    
  }
}

export default auth;